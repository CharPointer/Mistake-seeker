<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Mistake Seeker</title>
    <style>
        body {
            margin: 0;
            background-color: #0e0e0e;
            color: #f8f8f8;
            font-family: Arial, sans-serif;
            padding: 20px;
            max-width: 800px;
            margin: 0 auto;
        }
        h1 {
            color: #ffdd00;
            text-align: center;
        }
        .problem {
            background: #1a1a1a;
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 20px;
            font-size: 1.2em;
        }
        .step {
            background: #1a1a1a;
            padding: 12px;
            border-radius: 8px;
            margin-bottom: 10px;
            cursor: pointer;
            border-left: 4px solid transparent;
            transition: all 0.3s;
        }
        .step:hover {
            background: #252525;
        }
        .correct {
            border-left-color: #00cc66;
            background: #1a331a;
        }
        .wrong {
            border-left-color: #cc0033;
            background: #331a1a;
        }
        .explanation {
            padding: 12px;
            background: #252525;
            border-radius: 8px;
            margin-top: 15px;
            display: none;
        }
        #nextBtn {
            background: #ffdd00;
            color: #000;
            border: none;
            padding: 10px 20px;
            border-radius: 5px;
            font-weight: bold;
            cursor: pointer;
            margin-top: 20px;
            display: none;
        }
    </style>
</head>
<body>
    <h1>Mistake Seeker</h1>
    <div id="content"></div>
    <button id="nextBtn">Next Problem</button>

    <script>
        // Sample data - REPLACE THIS WITH YOUR ACTUAL JSON LOADING CODE
        const levels = [
            {
                "problem": "$$\\frac{3}{x+1} = 6$$",
                "steps": [
                    "\\(\\frac{3}{x+1} = 6\\) (Pradinė lygtis)",
                    "\\(3 = 6(x + 1)\\) (Dauginame abi puses iš x + 1)",
                    "\\(3 = 6x + 6\\) (Išskleidžiame dešinę pusę)",
                    "\\(3 - 6 = 6x\\) (Atimame 6 iš abiejų pusių)",
                    "\\(-3 = 6x\\) (Sumažiname kairę pusę)",
                    "\\(x = -\\frac{1}{2}\\) (Padaliname abi puses iš 6)"
                ],
                "mistakeStep": null,
                "explanation": "Šioje lygtyje klaidų nėra"
            }
        ];

        let currentLevel = 0;
        let clickable = false;

        function renderLevel() {
            const level = levels[currentLevel];
            document.getElementById('content').innerHTML = `
                <div class="problem">${level.problem}</div>
                ${level.steps.map((step, i) => `
                    <div class="step" onclick="checkStep(${i})">
                        ${step}
                    </div>
                `).join('')}
                <div class="explanation" id="explanation"></div>
            `;
            
            // Process math after rendering
            if (window.MathJax) {
                MathJax.typesetPromise().then(() => {
                    clickable = true;
                });
            }
        }

        function checkStep(stepIndex) {
            if (!clickable) return;
            
            const level = levels[currentLevel];
            const steps = document.querySelectorAll('.step');
            const explanation = document.getElementById('explanation');
            
            steps.forEach(step => step.onclick = null);
            
            if (level.mistakeStep === stepIndex) {
                steps[stepIndex].classList.add('correct');
                explanation.innerHTML = '✅ Correct! ' + level.explanation;
            } else {
                steps[stepIndex].classList.add('wrong');
                explanation.innerHTML = '❌ Incorrect. ' + level.explanation;
            }
            
            explanation.style.display = 'block';
            document.getElementById('nextBtn').style.display = 'inline-block';
            
            if (window.MathJax) {
                MathJax.typesetPromise();
            }
        }

        document.getElementById('nextBtn').onclick = function() {
            currentLevel++;
            if (currentLevel >= levels.length) {
                document.getElementById('content').innerHTML = '<h2>All problems completed!</h2>';
                this.style.display = 'none';
            } else {
                renderLevel();
                this.style.display = 'none';
            }
        };

        // Initialize MathJax and start
        window.MathJax = {
            tex: {
                inlineMath: [['\\(', '\\)']],
                displayMath: [['$$', '$$']],
                processEscapes: true
            },
            startup: {
                pageReady: () => {
                    return MathJax.startup.defaultPageReady().then(() => {
                        renderLevel();
                    });
                }
            }
        };

        // Load MathJax
        const script = document.createElement('script');
        script.src = 'https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js';
        script.async = true;
        document.head.appendChild(script);
    </script>
</body>
</html>
